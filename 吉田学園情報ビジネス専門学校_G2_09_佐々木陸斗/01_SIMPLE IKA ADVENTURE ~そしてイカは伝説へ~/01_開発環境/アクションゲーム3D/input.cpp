//============================================================
//
// 3D制作　キーボードの処理[input.cpp]
// AUTHOR:Sasaki Rikuto
//
//============================================================
#include "input.h"
#include "main.h"
#include "camera.h"

//============================================================
//マクロ定義
//============================================================
#define NUM_KEY_MAX		(256)	//キーの最大数

//============================================================
//グローバル変数
//============================================================
LPDIRECTINPUT8 g_pInput = NULL;					//オブジェクトへのポインタ
LPDIRECTINPUTDEVICE8 g_pDevKeyboard = NULL;		//入力デバイスへのポインタ
BYTE g_aKeyState[NUM_KEY_MAX];					//キーボードのプレス情報
BYTE g_aKeyStateTrigger[NUM_KEY_MAX];			//キーボードのトリガー情報

//============================================================
//キーボードの初期化
//============================================================
HRESULT InitKeyboard(HINSTANCE hInstance, HWND hWnd)
{
	//オブジェクトの作成
	if (FAILED(DirectInput8Create(hInstance, DIRECTINPUT_VERSION,
		IID_IDirectInput8, (void**)&g_pInput, NULL)))
	{
		return E_FAIL;
	}

	//入力デバイスの作成
	if (FAILED(g_pInput->CreateDevice(GUID_SysKeyboard, &g_pDevKeyboard, NULL)))
	{
		return E_FAIL;
	}

	//データフォーマットを設定
	if (FAILED(g_pDevKeyboard->SetDataFormat(&c_dfDIKeyboard)))
	{
		return E_FAIL;
	}

	//協調フォーマットを設定
	if (FAILED(g_pDevKeyboard->SetCooperativeLevel(
		hWnd,
		(DISCL_FOREGROUND | DISCL_NONEXCLUSIVE))))
	{
		return E_FAIL;
	}


	//キーボードのアクセス権を獲得
	g_pDevKeyboard->Acquire();

	return S_OK;
}

//============================================================
//キーボードの終了処理
//============================================================
void UninitKeyboard(void)
{
//入力デバイスの破棄
	if (g_pDevKeyboard != NULL)
	{
		g_pDevKeyboard->Unacquire();
		g_pDevKeyboard->Release();
		g_pDevKeyboard = NULL;
	}
	//オブジェクトの破棄
	if (g_pInput != NULL)
	{
		g_pInput->Release();
		g_pInput = NULL;
	}
}

//============================================================
//キーボードの更新処理
//============================================================
void UpdateKeyboard(void)
{
	BYTE aKeyState[NUM_KEY_MAX];	//キーボードの入力情報
	int nCntKey;

	//入力デバイスからデータを取得
	if (SUCCEEDED(g_pDevKeyboard->GetDeviceState(sizeof(aKeyState),&aKeyState[0])))
	{
		for (nCntKey = 0; nCntKey < NUM_KEY_MAX; nCntKey++)
		{
			g_aKeyStateTrigger[nCntKey] = (g_aKeyState[nCntKey] ^ aKeyState[nCntKey])&aKeyState[nCntKey];

			g_aKeyState[nCntKey] = aKeyState[nCntKey];	//キーボードのプレス情報
		}
	}
	else
	{
		g_pDevKeyboard->Acquire();	//キーボードのアクセス権を獲得
	}
}
//キーボードのプレス情報を取得
bool  GetKeyboardPress(int nKey)
{
	return(g_aKeyState[nKey] & 0x80) ? true : false;
}

//キーボードのトリガー情報を取得
bool  GetKeyboardTrigger(int nKey)
{
	return(g_aKeyStateTrigger[nKey] & 0x80) ? true : false;
}